name: Test

on:
  pull_request:
    types:
      - "opened"
      - "synchronize"
  push:
    branches:
      - "main"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]  # , "3.12" ]
        pydantic_v2: [ "true", "false" ]
        fastapi_version: [ "<0.112.4", ">=0.112.4" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Postgresql
        uses: harmon758/postgresql-action@v1
        with:
          postgresql db: 'postgres'
          postgresql user: 'postgres'
          postgresql password: 'postgres'

      - name: Set up MongoDB
        uses: supercharge/mongodb-github-action@1.11.0

      - name: Set up Scylla
        run: |
          export DOCKER_ID=$(docker run -d scylladb/scylla:latest --cluster-name test )
          export CQL_TEST_HOST=$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' ${DOCKER_ID})
          while ! nc -z ${CQL_TEST_HOST} 9042; do   
            sleep 0.1 # wait for 1/10 of the second before check again
          done

          echo "CQL_TEST_HOST=${CQL_TEST_HOST}" >> $GITHUB_ENV

      - name: Install Poetry
        uses: snok/install-poetry@v1.4.1

      - name: Setup cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-py${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}-v1

      - name: Install dependencies
        run: |
          poetry install -E all --sync

      - name: Install pydantic v2
        if: ${{ matrix.pydantic_v2 == 'true' }}
        run: |
          poetry run pip install -U --pre fastapi pydantic

      - name: Install FastAPI
        run : |
          poetry run pip install -U "fastapi${{ matrix.fastapi_version }}"

      - name: Unit tests pydantic v2
        if: ${{ matrix.pydantic_v2 == 'true' }}
        run: |
          poetry run pytest tests  --ignore=tests/ext --cov-report=xml --cassandra-dsn=${CQL_TEST_HOST}

      - name: Unit tests
        if: ${{ matrix.pydantic_v2 == 'false' }}
        run: |
          poetry run pytest tests -m "not gino" --cov-report=xml --cassandra-dsn=${CQL_TEST_HOST}

      - name: Unit tests SQLAlchemy 2.0
        if: ${{ matrix.pydantic_v2 == 'false' }}
        run: |
          poetry run pip install -U "sqlalchemy>2.0.0"
          poetry run pytest tests -m "sqlalchemy20" --cov-append --cov-report=xml --cassandra-dsn=${CQL_TEST_HOST}

      # TODO: remove it when ormar will support pydantic v2
      - name: Unit tests Odmantic
        if: ${{ matrix.pydantic_v2 == 'true' }}
        run: |
          poetry run pip install -U odmantic "pydantic<2.7"
          poetry run pytest tests -m "odmantic" --cov-append --cov-report=xml --cassandra-dsn=${CQL_TEST_HOST}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
