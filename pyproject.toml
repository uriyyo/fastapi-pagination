[tool.poetry]
name = "fastapi-pagination"
version = "0.12.34"
description = "FastAPI pagination"
authors = [
    "Yurii Karabas <1998uriyyo@gmail.com>",
]

license = "MIT"
readme = "README.md"
repository = "https://github.com/uriyyo/fastapi-pagination"

classifiers = [
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3 :: Only',
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
pydantic = ">=1.9.1"
typing-extensions = "^4.8.0"
SQLAlchemy = { version = ">=1.3.20", optional = true }
databases = { version = ">=0.6.0", optional = true }
orm = { version = ">=0.3.1", optional = true }
tortoise-orm = { version = ">=0.22.0", optional = true }
# TODO: ormar still depends on sqlalchemy<2.0
#ormar = { version = ">=0.20.2", optional = true}
asyncpg = { version = ">=0.24.0", optional = true }
django = { version = "<5.0.0", optional = true}
piccolo = { version = ">=0.89,<1.23", optional = true}
motor =  { version = ">=3.6.0,<4.0.0", optional = true }
mongoengine = {version = ">=0.23.1,<0.30.0", optional = true}
sqlmodel = { version = ">=0.0.22", optional = true}
pony = { version = "^0.7.16", optional = true}
beanie = { version = ">=1.25.0", optional = true}
sqlakeyset = { version = "^2.0.1680321678", optional = true }
scylla-driver = {version = "^3.25.6", optional = true}
bunnet = {version = "^1.1.0", optional = true}
odmantic = {version = "^1.0.2", optional = true}
google-cloud-firestore = {version = "^2.19.0", optional = true}

[tool.poetry.group.dev.dependencies]
fastapi = ">=0.93.0"
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.25.3"
flaky = "^3.8.1"
pre-commit = "^4.1.0"
Faker = "^35.2.0"
psycopg2-binary = "^2.9.10"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.50"
pymdown-extensions = "^10.14"
fontawesome-markdown = "^0.2.6"
httpx = "^0.28.1"
asgi-lifespan = "^2.1.0"
requests = "^2.32.2"
uvicorn = "^0.34.0"
Jinja2 = "^3.1.5"
mypy = "^1.14.1"
ruff = "^0.9.4"

[tool.poetry.extras]
sqlmodel = ["sqlmodel", "sqlakeyset"]
sqlalchemy = ["SQLAlchemy", "sqlakeyset"]
databases = ["databases"]
orm = ["orm", "databases", "typesystem"]
ormar = []
tortoise = ["tortoise-orm"]
asyncpg = ["SQLAlchemy", "asyncpg"]
django = ["django", "databases"]
piccolo = ["piccolo"]
motor = ["motor"]
bunnet = ["bunnet"]
mongoengine = ["mongoengine"]
beanie =  ["beanie"]
scylla-driver = ["scylla-driver"]
odmantic = ["odmantic"]
firestore = ["google-cloud-firestore"]
all = [
    "sqlmodel",
    "SQLAlchemy",
    "databases",
    "orm",
#    "ormar",
    "odmantic",
    "tortoise-orm",
    "asyncpg",
    "django",
    "piccolo",
    "motor",
    "mongoengine",
    "pony",
    "beanie",
    "sqlakeyset",
    "scylla-driver",
    "bunnet",
    "google-cloud-firestore",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "ALL",  # select all checks by default
]
ignore = [
    # single rule exclude
    "B008",    # do not perform function calls in argument defaults
    "S101",    # use of assert detected
    "SIM114",  # allow have multiplie ifs with same body
    "TRY003",  # allow long exc message
    "RUF100",  # allow unused noqa
    "RUF012",  # allow mutable class var
    "COM812",  # will be handled by ruff format
    "ISC001",  # will be handled by ruff format
    "SLF001",  # allow access to private member
    "N806",    # allow variable name to start from uppercase letter
    "N805",    # ignore first argument name check
    "N818",    # ignore exception name should ends with Error suffix
    "FAST002", # allow to use non-annotated dependencies
    "PLR0913",  # allow more than 5 arguments
    "PLR2004", # allow to compare with "magic numbers"
    "UP007",   # ignore X | Y annotation suggestion
    "TC001",   # ignore moving things to if TYPE_CHECKING block
    "TC002",   # ignore moving things to if TYPE_CHECKING block
    "TC003",   # ignore moving things to if TYPE_CHECKING block
    "A005",    # allow module name to shadow a Python standard-library module

    # full rule exclude
    "D",    # ignore docstrings
    "FA",  # ignore future annotations
    "ANN", # ignore annotations
    "FIX", # ignore FIXMEs
    "TD",  # ignore all TODOs
    "ARG", # ignore unused arguments
    "FBT", # ignore flake8-boolean-trap
    "EM",  # ignore error message formatting
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
]
per-file-ignores = {}
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.9"
strict = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_reexport = false
show_column_numbers= true
show_error_codes= true

[tool.coverage.paths]
source = ["fastapi_pagination"]

[tool.coverage.run]
source = ["fastapi_pagination"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@overload",
    "if TYPE_CHECKING:",
]
