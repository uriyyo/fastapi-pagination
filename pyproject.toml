[tool.poetry]
name = "fastapi-pagination"
version = "0.12.14"
description = "FastAPI pagination"
authors = [
    "Yurii Karabas <1998uriyyo@gmail.com>",
]

license = "MIT"
readme = "README.md"
repository = "https://github.com/uriyyo/fastapi-pagination"

classifiers = [
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3 :: Only',
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
pydantic = ">=1.9.1"
fastapi = ">=0.93.0"
typing-extensions = "^4.8.0"
SQLAlchemy = { version = ">=1.3.20", optional = true }
databases = { version = ">=0.6.0", optional = true }
orm = { version = ">=0.3.1", optional = true }
tortoise-orm = { version = ">=0.16.18,<0.21.0", optional = true }
asyncpg = { version = ">=0.24.0", optional = true }
ormar = { version = ">=0.11.2", optional = true}
django = { version = "<5.0.0", optional = true}
piccolo = { version = ">=0.89,<0.122", optional = true}
motor =  { version = ">=2.5.1,<4.0.0", optional = true }
mongoengine = {version = ">=0.23.1,<0.28.0", optional = true}
sqlmodel = { version = ">=0.0.8,<0.0.15", optional = true}
pony = { version = "^0.7.16", optional = true}
beanie = { version = "^1.11.9", optional = true}
sqlakeyset = { version = "^2.0.1680321678", optional = true }
scylla-driver = {version = "^3.25.6", optional = true}
bunnet = {version = "^1.1.0", optional = true}

[tool.poetry.dev-dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
flaky = "^3.7.0"
black = "^23.12.0"
pre-commit = "^3.5.0"
Faker = "^21.0.0"
psycopg2-binary = "^2.9.9"
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.2"
pymdown-extensions = "^10.5"
fontawesome-markdown = "^0.2.6"
httpx = "^0.25.1"
asgi-lifespan = "^2.1.0"
requests = "^2.31.0"
uvicorn = "^0.24.0"
Jinja2 = "^3.1.2"
mypy = "^1.7.1"
ruff = "^0.1.8"

[tool.poetry.extras]
sqlmodel = ["sqlmodel", "sqlakeyset"]
sqlalchemy = ["SQLAlchemy", "sqlakeyset"]
databases = ["databases"]
orm = ["orm", "databases", "typesystem"]
ormar = ["ormar"]
tortoise = ["tortoise-orm"]
asyncpg = ["SQLAlchemy", "asyncpg"]
django = ["django", "databases"]
piccolo = ["piccolo"]
motor = ["motor"]
bunnet = ["bunnet"]
mongoengine = ["mongoengine"]
beanie =  ["beanie"]
scylla-driver = ["scylla-driver"]
all = ["sqlmodel", "SQLAlchemy", "databases", "orm", "ormar", "tortoise-orm", "asyncpg", "django", "piccolo", "motor", "mongoengine", "pony", "beanie", "sqlakeyset", "scylla-driver", "bunnet"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''


[tool.ruff]
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "G",  # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TRY", # tryceratops
    "RUF", # ruff specific rules
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "PT004", # fixture doesn't return anything
    "PT013", # allow from pytest import thing
    "SIM114", # allow have multiplie ifs with same body
    "TRY003", # allow long exc message
    "RUF100", # allow unused noqa
    "RUF012", # allow mutable class var
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
]
per-file-ignores = {}
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
python_version = 3.8
strict = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_reexport = false
show_column_numbers= true
show_error_codes= true

[tool.coverage.paths]
source = ["fastapi_pagination"]

[tool.coverage.run]
source = ["fastapi_pagination"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@overload",
    "if TYPE_CHECKING:",
]
